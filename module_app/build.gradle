apply plugin: 'com.android.application'
//apply plugin: 'kotlin-android-extensions'
//apply plugin: 'kotlin-android'

//读取签名配置文件
def getSigningProperties() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    if (properties != null && properties.containsKey('storePassword') && properties.containsKey('keyPassword')) {
        android.signingConfigs.release.storePassword = properties['storePassword']
        android.signingConfigs.release.keyPassword = properties['keyPassword']
    }
}

def getTime() {
    return new Date().format("yyyy-MMdd-HHmm", TimeZone.getDefault())
}

android {

    def globalConfiguration = rootProject.extensions.getByName("ext")
    compileSdkVersion globalConfiguration.getAt("androidCompileSdkVersion")
    buildToolsVersion globalConfiguration.getAt("androidBuildToolsVersion")

    defaultConfig {
        applicationId globalConfiguration.getAt("androidApplicationId")
        minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
        targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")
        versionCode globalConfiguration.getAt("androidVersionCode")
        versionName globalConfiguration.getAt("androidVersionName")

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
            }
        }
    }

    signingConfigs {
        release {
            keyAlias '漫友'
            storeFile file('../signing/acg12.release')
            keyPassword
            storePassword
        }
    }

    getSigningProperties()

    buildTypes {

        debug {
            applicationIdSuffix ".debug"
            minifyEnabled false
            shrinkResources false
//            signingConfig signingConfigs.release  // 如果local.properties内容不为空，可以开启
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all {
            if (variant.name.equals('release')) {
                outputFileName = "漫友-v${variant.versionName}-${getTime()}.apk"
            } else {
                outputFileName = "漫友-v${variant.versionName}-beta.apk"
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':library')

    def toolDependencies = rootProject.ext.toolDependencies
    implementation toolDependencies.dagger
    implementation toolDependencies.dagger_android
    implementation toolDependencies.dagger_android_support
    annotationProcessor toolDependencies.dagger_compiler
    annotationProcessor toolDependencies.dagger_android_processor
    annotationProcessor toolDependencies.butterKnife_apt

//    def kotlinDependencies = rootProject.ext.kotlinDependencies
//    implementation kotlinDependencies.kotlin
}
